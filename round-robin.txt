#include<stdio.h>

struct process {
    int burst, wait, comp, rem_burst, f; // burst time, wait time, completion time, remaining burst time, and flag
} p[20] = {0, 0};

int main() {
    int n, i, j, totalwait = 0, totalturn = 0, quantum, flag = 1, time = 0;

    // Input number of processes and quantum time
    printf("\nEnter The No Of Processes: ");
    scanf("%d", &n);
    printf("\nEnter The Quantum time (in ms): ");
    scanf("%d", &quantum);

    // Input burst times for each process and initialize remaining burst time
    for (i = 0; i < n; i++) {
        printf("Enter The Burst Time (in ms) For Process #%2d: ", i + 1);
        scanf("%d", &p[i].burst);
        p[i].rem_burst = p[i].burst; // Initially, remaining burst time is the burst time
        p[i].f = 1;  // Flag to check if process is incomplete
    }

    // Printing the header for the execution order
    printf("\nOrder Of Execution\n");
    printf("\nProcess      Starting     Ending     Remaining\n");
    printf("             Time        Time        Time\n");

    // Round Robin scheduling
    while (flag == 1) {
        flag = 0;
        for (i = 0; i < n; i++) {
            if (p[i].f == 1) {  // Process is still incomplete
                flag = 1;
                if (p[i].rem_burst > quantum) {
                    // If remaining burst time is greater than quantum
                    time += quantum;
                    p[i].rem_burst -= quantum;
                    printf("\nprocess # %-3d  %-10d   %-10d   %-10d", i + 1, time - quantum, time, p[i].rem_burst);
                } else {
                    // If remaining burst time is less than or equal to quantum
                    time += p[i].rem_burst;
                    p[i].wait = time - p[i].burst; // Waiting time = time elapsed before the process starts
                    p[i].rem_burst = 0;
                    p[i].f = 0;  // Process is now complete
                    printf("\nprocess # %-3d  %-10d   %-10d   %-10d", i + 1, time - p[i].burst, time, p[i].rem_burst);
                }
            }
        }
    }

    // Calculating the total waiting time and turnaround time
    printf("\n\n------------------");
    printf("\nProcess \t Waiting Time  Turnaround Time ");
    for (i = 0; i < n; i++) {
        int turnaround_time = p[i].wait + p[i].burst;
        totalwait += p[i].wait;
        totalturn += turnaround_time;
        printf("\nProcess # %-12d%-15d%-15d", i + 1, p[i].wait, turnaround_time);
    }

    // Calculating and printing the average waiting time and average turnaround time
    printf("\n\nAverage\n------------------");
    printf("\nAverage Waiting Time : %.2f ms", totalwait / (float)n);
    printf("\nAverage Turnaround Time : %.2f ms\n", totalturn / (float)n);

    return 0;
}
