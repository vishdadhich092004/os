#include<stdio.h>

struct process {
    int burst, wait, no;
} p[20] = {0, 0};

int main() {
    int n, i, j, totalwait = 0, totalturn = 0;

    // Input the number of processes
    printf("\nEnter The Number Of Processes: ");
    scanf("%d", &n);

    // Input burst times and process numbers
    for(i = 0; i < n; i++) {
        printf("Enter The Burst Time (in ms) For Process #%2d: ", i + 1);
        scanf("%d", &p[i].burst);
        p[i].no = i + 1;  // Process number
    }

    // Sorting the processes based on burst time (Shortest Job First)
    for(i = 0; i < n; i++) {
        for(j = 0; j < n - i - 1; j++) {
            if(p[j].burst > p[j + 1].burst) {
                // Swapping burst times
                int temp_burst = p[j].burst;
                int temp_no = p[j].no;

                p[j].burst = p[j + 1].burst;
                p[j].no = p[j + 1].no;

                p[j + 1].burst = temp_burst;
                p[j + 1].no = temp_no;
            }
        }
    }

    // Initialize waiting time for the first process as 0
    p[0].wait = 0;

    // Print table headers
    printf("\nProcess\tWaiting Time (in ms)\tTurnaround Time (in ms)");
    printf("\n-------------------------------------------------------------");

    // Calculate waiting time and turnaround time
    for(i = 0; i < n; i++) {
        // Turnaround time = waiting time + burst time
        int turnaround_time = p[i].wait + p[i].burst;

        // Print process details
        printf("\nProcess #%2d\t\t%-15d\t\t%-15d", p[i].no, p[i].wait, turnaround_time);

        // Accumulate total waiting and turnaround times
        totalwait += p[i].wait;
        totalturn += turnaround_time;

        // Calculate waiting time for the next process
        if(i < n - 1) {
            p[i + 1].wait = p[i].wait + p[i].burst;
        }
    }

    // Calculate and print average waiting time and average turnaround time
    printf("\n\nAverage\n---------");
    printf("\nAverage Waiting Time: %.2f ms", totalwait / (float)n);
    printf("\nAverage Turnaround Time: %.2f ms\n", totalturn / (float)n);

    return 0;
}
